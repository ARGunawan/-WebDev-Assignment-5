{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","updateZip","evt","a","zip","target","value","linkToAPI","setState","zipcode","axios","get","response","data","found","console","log","status","updateCity","city","toUpperCase","cityName","placeZips","foundZips","makeTableZip","currData","state","output","i","length","push","className","City","State","Lat","Long","EstimatedPopulation","TotalWages","makeTableCity","bind","this","onChange","placeholder","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1739ee00.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    //the default state of the state\n    this.state = {\n      zipcode: \"\", //no zipcode\n      data: [], //no results\n      cityName: \"\",\n      placeZips: [], //need for city search app\n      found: false, //this is for the zipcode search part\n      foundZips: false, //this is for the city search zipcode part\n    };\n\n    //if it does get updated, bind that result to the state.\n    this.updateZip = this.updateZip.bind(this);\n    this.updateCity = this.updateCity.bind(this);\n  }\n\n  //the code that changes the page and gets the zipcode information\n  updateZip = async (evt) => {\n    let zip = evt.target.value;\n    let linkToAPI = \"https://ctp-zip-api.herokuapp.com/zip/\" + zip; //link to the api\n\n    this.setState({\n      zipcode: zip,\n    });\n    //console.log(this.state.zipcode);\n\n    //if the zipcode is valid we store the data of the citie into the state and found is true\n    try {\n      let response = await axios.get(linkToAPI);\n      this.setState({ data: response.data, found: true });\n    } catch (error) {\n      //If there was an invalid zipcode we send errors into our console and setstate to false\n      if (error.response) {\n        console.log(error.response.data);\n        console.log(error.response.status);\n        this.setState({ found: false });\n      }\n    }\n  };\n\n  //update city method below\n  updateCity = async (evt) => {\n    let city = evt.target.value;\n    let linkToAPI =\n      \"http://ctp-zip-api.herokuapp.com/city/\" + city.toUpperCase(); //link to api\n    this.setState({\n      cityName: city,\n    });\n\n    try {\n      let response = await axios.get(linkToAPI);\n      this.setState({ placeZips: response.data, foundZips: true });\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.data);\n        console.log(error.response.status);\n        this.setState({ foundZips: false });\n      }\n    }\n  };\n\n  //set up output for the first part where the user enters a zipcode and it will output city information\n  makeTableZip = () => {\n    let currData = this.state.data;\n    let foundMatch = this.state.found;\n    let output = [];\n    if (!foundMatch) {\n      return <div className=\"centering\">Not found </div>;\n    } else {\n      //For loop is needed because the way the data is set up it is set up in an array, so need to iterate through it\n      for (let i = 0; i < currData.length; i++) {\n        output.push(\n          <div className=\"cards\">\n            <h3>{currData[i].City}</h3>\n            {/* print the city in which lands in the zipcode*/}\n            {/* an unordered list of the needed things\n          - state\n          - location\n          - population\n          - total wages */}\n            <ul>\n              <li>State: {currData[i].State}</li>\n              <li>\n                Location: ({currData[i].Lat},{currData[i].Long})\n              </li>\n              <li>Population (estimated): {currData[i].EstimatedPopulation}</li>\n              <li>Total Wages: {currData[i].TotalWages}</li>\n            </ul>\n          </div>\n        );\n      }\n      return output;\n    }\n  };\n\n  //set up output for the second part where user inputs a city and outputs all the zipcodes associated with the city\n  makeTableCity = () => {\n    let currData = this.state.placeZips;\n    let foundMatch = this.state.foundZips;\n    let output = [];\n    if (!foundMatch) {\n      return <div className=\"centering\">Not found </div>;\n    } else {\n      //For loop is needed because the way the data is set up it is set up in an array, so need to iterate through it\n      for (let i = 0; i < currData.length; i++) {\n        output.push(\n          <div>\n            <ul>\n              <li className=\"zipcodeList\">{currData[i]}</li>\n            </ul>\n          </div>\n        );\n      }\n      return output;\n    }\n  };\n  //after all the work is done, this is final bit that it should do.\n  render() {\n    //console.log(this.state.data);\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h2>Zip Code Search</h2>\n        </div>\n        <div>\n          <div>\n            <div className=\"centering\">\n              {/* input the zipcode to be searched\n            when the field is changed, then it triggers the screen to change. */}\n              Zip Code:\n              <input\n                value={this.state.zipcode}\n                onChange={this.updateZip}\n                placeholder=\"Try 10016\"\n              ></input>\n              {this.makeTableZip()}\n            </div>\n            {/* Below is the div for city search */}\n            <div className=\"centering\">\n              CITY NAME:\n              <input\n                value={this.state.cityName}\n                onChange={this.updateCity}\n                placeholder=\"Try brooklyn\"\n              ></input>\n              {this.makeTableCity()}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}